#!/usr/bin/env python3
"""
SYMPY ALGORITHMIC COMPLEXITY ANALYSIS
=====================================
Ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p thu·∫≠t to√°n c·ªßa c√°c t√≠nh nƒÉng SymPy
"""

import sympy as sp
from sympy import *
import time
import sys
import gc

# Try to import optional dependencies
try:
    import psutil
    HAS_PSUTIL = True
except ImportError:
    HAS_PSUTIL = False

try:
    import matplotlib.pyplot as plt
    HAS_MATPLOTLIB = True
except ImportError:
    HAS_MATPLOTLIB = False

try:
    import numpy as np
    HAS_NUMPY = True
except ImportError:
    HAS_NUMPY = False

def get_memory_usage():
    """L·∫•y memory usage hi·ªán t·∫°i"""
    if HAS_PSUTIL:
        import os
        process = psutil.Process(os.getpid())
        return process.memory_info().rss / 1024 / 1024  # MB
    else:
        return 0.0  # Return 0 if psutil not available

def benchmark_function(func, *args, runs=5):
    """Benchmark m·ªôt function v·ªõi nhi·ªÅu l·∫ßn ch·∫°y"""
    times = []
    memory_before = get_memory_usage()
    
    for _ in range(runs):
        gc.collect()  # Clear memory
        start_time = time.perf_counter()
        result = func(*args)
        end_time = time.perf_counter()
        times.append(end_time - start_time)
    
    memory_after = get_memory_usage()
    avg_time = sum(times) / len(times)
    memory_used = memory_after - memory_before
    
    return avg_time, memory_used, result

def print_section(title):
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)

def print_complexity(operation, theoretical, practical, notes=""):
    print(f"üìä {operation}")
    print(f"   Theoretical: {theoretical}")
    print(f"   Practical:   {practical}")
    if notes:
        print(f"   Notes:       {notes}")
    print()

def main():
    print("üî¨ SYMPY ALGORITHMIC COMPLEXITY ANALYSIS")
    print("Ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p thu·∫≠t to√°n c·ªßa SymPy")
    
    x, y, z = symbols('x y z')
    n = symbols('n', integer=True, positive=True)
    
    # =================================================================
    # 1. BASIC SYMBOLIC OPERATIONS COMPLEXITY
    # =================================================================
    print_section("1. ƒê·ªò PH·ª®C T·∫†P C√ÅC PH√âP TO√ÅN SYMBOLIC C∆† B·∫¢N")
    
    print("üßÆ Testing expression expansion complexity...")
    
    # Test expand complexity v·ªõi different degrees
    degrees = [5, 10, 15, 20, 25]
    expand_times = []
    
    for degree in degrees:
        expr = (x + y + z + 1)**degree
        avg_time, memory, _ = benchmark_function(expand, expr)
        expand_times.append(avg_time)
        if HAS_PSUTIL:
            print(f"Expand (x+y+z+1)^{degree}: {avg_time:.4f}s, Memory: {memory:.2f}MB")
        else:
            print(f"Expand (x+y+z+1)^{degree}: {avg_time:.4f}s")
    
    print_complexity(
        "Expression Expansion",
        "O(d^n) where d=degree, n=variables",
        f"Measured times: {[f'{t:.4f}s' for t in expand_times]}",
        "Exponential growth v·ªõi degree"
    )
    
    # Test factor complexity
    print("\nüî¢ Testing factorization complexity...")
    
    factor_times = []
    for degree in [10, 15, 20, 25, 30]:
        expr = x**degree - 1  # Easy to factor: (x-1)(x^(n-1) + x^(n-2) + ... + 1)
        avg_time, memory, _ = benchmark_function(factor, expr)
        factor_times.append(avg_time)
        if HAS_PSUTIL:
            print(f"Factor x^{degree}-1: {avg_time:.4f}s, Memory: {memory:.2f}MB")
        else:
            print(f"Factor x^{degree}-1: {avg_time:.4f}s")
    
    print_complexity(
        "Polynomial Factorization",
        "O(d^6) for dense polynomials (worst case exponential)",
        f"Measured times: {[f'{t:.4f}s' for t in factor_times]}",
        "Depends heavily on polynomial structure"
    )
    
    # =================================================================
    # 2. EQUATION SOLVING COMPLEXITY
    # =================================================================
    print_section("2. ƒê·ªò PH·ª®C T·∫†P GI·∫¢I PH∆Ø∆†NG TR√åNH")
    
    print("‚ö° Testing polynomial equation solving...")
    
    # Linear systems
    print("\n--- Linear Systems ---")
    matrix_sizes = [5, 10, 20, 30, 50]
    linear_solve_times = []
    
    for size in matrix_sizes:
        # Create invertible matrix (add identity to ensure non-singular)
        A = Matrix([[i+j+1 if i != j else i+j+2 for j in range(size)] for i in range(size)])
        b = Matrix([i+1 for i in range(size)])
        
        avg_time, memory, _ = benchmark_function(A.LUsolve, b)
        linear_solve_times.append(avg_time)
        if HAS_PSUTIL:
            print(f"Linear system {size}x{size}: {avg_time:.4f}s, Memory: {memory:.2f}MB")
        else:
            print(f"Linear system {size}x{size}: {avg_time:.4f}s")
    
    print_complexity(
        "Linear System Solving (LU Decomposition)",
        "O(n¬≥) for n√ón matrix",
        f"Measured times: {[f'{t:.4f}s' for t in linear_solve_times]}",
        "Follows cubic growth as expected"
    )
    
    # Polynomial equation degrees
    print("\n--- Polynomial Equations ---")
    poly_solve_times = []
    for degree in [2, 3, 4, 5]:
        # Create polynomial equation
        poly_expr = sum(x**i for i in range(degree+1)) - 1
        
        avg_time, memory, result = benchmark_function(solve, poly_expr, x)
        poly_solve_times.append(avg_time)
        print(f"Polynomial degree {degree}: {avg_time:.4f}s, {len(result)} solutions")
    
    print_complexity(
        "Polynomial Equation Solving",
        "O(d^3) for degree d (Abel-Ruffini: no general formula for d‚â•5)",
        f"Measured times: {[f'{t:.4f}s' for t in poly_solve_times]}",
        "Becomes impossible for high degrees without numerical methods"
    )
    
    # =================================================================
    # 3. CALCULUS OPERATIONS COMPLEXITY
    # =================================================================
    print_section("3. ƒê·ªò PH·ª®C T·∫†P C√ÅC PH√âP TO√ÅN GI·∫¢I T√çCH")
    
    print("üìà Testing calculus operations...")
    
    # Differentiation complexity
    print("\n--- Differentiation ---")
    diff_times = []
    expressions = [
        x**2,
        x**5 + 3*x**3 + 2*x,
        sin(x)*cos(x)*exp(x),
        (x**2 + 1)**(1/2),
        sum(x**i/factorial(i) for i in range(10))  # Series
    ]
    
    for i, expr in enumerate(expressions):
        avg_time, memory, _ = benchmark_function(diff, expr, x)
        diff_times.append(avg_time)
        print(f"Diff expression {i+1}: {avg_time:.6f}s")
    
    print_complexity(
        "Symbolic Differentiation",
        "O(n) where n is expression tree size",
        "Linear v·ªõi expression complexity",
        "Very efficient - follows chain rule mechanically"
    )
    
    # Integration complexity
    print("\n--- Integration ---")
    int_times = []
    int_expressions = [
        x**2,
        sin(x),
        exp(x),
        1/(x**2 + 1),
        sin(x)*cos(x)
    ]
    
    for i, expr in enumerate(int_expressions):
        avg_time, memory, result = benchmark_function(integrate, expr, x)
        int_times.append(avg_time)
        print(f"Integrate expression {i+1}: {avg_time:.4f}s")
    
    print_complexity(
        "Symbolic Integration",
        "Undecidable in general! Can be exponential or impossible",
        f"Simple cases: {[f'{t:.4f}s' for t in int_times]}",
        "Uses Risch algorithm - very complex for general cases"
    )
    
    # =================================================================
    # 4. LINEAR ALGEBRA COMPLEXITY
    # =================================================================
    print_section("4. ƒê·ªò PH·ª®C T·∫†P ƒê·∫†I S·ªê TUY·∫æN T√çNH")
    
    print("üî∫ Testing matrix operations...")
    
    # Matrix multiplication
    print("\n--- Matrix Multiplication ---")
    sizes = [10, 20, 30, 50]
    matmul_times = []
    
    for size in sizes:
        A = Matrix([[i+j+1 for j in range(size)] for i in range(size)])
        B = Matrix([[i*j+1 for j in range(size)] for i in range(size)])
        
        avg_time, memory, _ = benchmark_function(lambda: A * B)
        matmul_times.append(avg_time)
        print(f"Matrix multiplication {size}x{size}: {avg_time:.4f}s")
    
    print_complexity(
        "Matrix Multiplication",
        "O(n¬≥) naive, O(n^2.807) Strassen, O(n^2.373) current best",
        f"SymPy uses O(n¬≥): {[f'{t:.4f}s' for t in matmul_times]}",
        "Clear cubic scaling"
    )
    
    # Determinant calculation
    print("\n--- Determinant Calculation ---")
    det_times = []
    
    for size in [5, 10, 15, 20]:
        A = Matrix([[i+j+1 if i != j else i+j+3 for j in range(size)] for i in range(size)])
        
        avg_time, memory, _ = benchmark_function(A.det)
        det_times.append(avg_time)
        print(f"Determinant {size}x{size}: {avg_time:.4f}s")
    
    print_complexity(
        "Determinant Calculation",
        "O(n¬≥) using LU decomposition",
        f"Measured: {[f'{t:.4f}s' for t in det_times]}",
        "Much better than O(n!) naive expansion"
    )
    
    # Eigenvalue computation
    print("\n--- Eigenvalue Computation ---")
    eigen_times = []
    
    for size in [3, 5, 8, 10]:
        A = Matrix([[i+j+1 if i != j else i+j+3 for j in range(size)] for i in range(size)])
        
        try:
            avg_time, memory, _ = benchmark_function(A.eigenvals)
            eigen_times.append(avg_time)
            print(f"Eigenvalues {size}x{size}: {avg_time:.4f}s")
        except Exception as e:
            print(f"Eigenvalues {size}x{size}: Failed - {e}")
            eigen_times.append(float('inf'))
    
    print_complexity(
        "Eigenvalue Computation",
        "O(n¬≥) for numerical, can be much worse for symbolic",
        "Depends on matrix structure - can become intractable",
        "SymPy tries exact computation - very expensive"
    )
    
    # =================================================================
    # 5. NUMBER THEORY COMPLEXITY
    # =================================================================
    print_section("5. ƒê·ªò PH·ª®C T·∫†P S·ªê H·ªåC")
    
    print("üî¢ Testing number theory operations...")
    
    # Prime testing
    print("\n--- Primality Testing ---")
    prime_test_times = []
    test_numbers = [101, 1009, 10007, 100003, 982451653]
    
    for num in test_numbers:
        avg_time, memory, result = benchmark_function(isprime, num)
        prime_test_times.append(avg_time)
        print(f"isprime({num}): {avg_time:.6f}s, Result: {result}")
    
    print_complexity(
        "Primality Testing",
        "O(k log¬≥ n) Miller-Rabin test",
        "SymPy uses deterministic test for small numbers",
        "Very efficient for practical sizes"
    )
    
    # Integer factorization
    print("\n--- Integer Factorization ---")
    factor_times = []
    test_numbers = [1001, 10001, 100001, 982451653]
    
    for num in test_numbers:
        avg_time, memory, result = benchmark_function(factorint, num)
        factor_times.append(avg_time)
        print(f"factorint({num}): {avg_time:.4f}s, Factors: {result}")
    
    print_complexity(
        "Integer Factorization",
        "Exponential in general (no known polynomial algorithm)",
        "Uses trial division, Pollard rho, etc.",
        "Can be very slow for large semiprimes"
    )
    
    # =================================================================
    # 6. POLYNOMIAL OPERATIONS COMPLEXITY
    # =================================================================
    print_section("6. ƒê·ªò PH·ª®C T·∫†P PH√âP TO√ÅN ƒêA TH·ª®C")
    
    print("üìê Testing polynomial operations...")
    
    # Polynomial multiplication
    print("\n--- Polynomial Multiplication ---")
    poly_mult_times = []
    degrees = [10, 50, 100, 200]
    
    for deg in degrees:
        p1 = Poly([1]*deg, x)  # Polynomial of degree deg-1
        p2 = Poly([2]*deg, x)
        
        avg_time, memory, _ = benchmark_function(lambda: p1 * p2)
        poly_mult_times.append(avg_time)
        print(f"Poly multiplication degree {deg}: {avg_time:.4f}s")
    
    print_complexity(
        "Polynomial Multiplication",
        "O(n¬≤) naive, O(n log n) FFT-based",
        f"Measured: {[f'{t:.4f}s' for t in poly_mult_times]}",
        "SymPy may use different algorithms based on size"
    )
    
    # GCD computation
    print("\n--- Polynomial GCD ---")
    gcd_times = []
    
    for deg in [10, 20, 30, 50]:
        p1 = Poly(x**deg + x**(deg-1) + 1, x)
        p2 = Poly(x**(deg-2) + x + 1, x)
        
        avg_time, memory, _ = benchmark_function(gcd, p1, p2)
        gcd_times.append(avg_time)
        print(f"Poly GCD degree {deg}: {avg_time:.4f}s")
    
    print_complexity(
        "Polynomial GCD",
        "O(n¬≤) Euclidean algorithm",
        f"Measured: {[f'{t:.4f}s' for t in gcd_times]}",
        "Quadratic in degree"
    )
    
    # =================================================================
    # 7. MEMORY COMPLEXITY ANALYSIS
    # =================================================================
    print_section("7. PH√ÇN T√çCH ƒê·ªò PH·ª®C T·∫†P B·ªò NH·ªö")
    
    if HAS_PSUTIL:
        print("üíæ Testing memory usage...")
        
        # Expression tree memory
        print("\n--- Expression Memory Usage ---")
        
        for size in [100, 500, 1000, 2000]:
            gc.collect()
            memory_before = get_memory_usage()
            
            # Create large expression
            expr = sum(x**i for i in range(size))
            expanded = expand(expr * (x + 1))
            
            memory_after = get_memory_usage()
            memory_used = memory_after - memory_before
            
            print(f"Expression size {size}: {memory_used:.2f}MB")
        
        # Matrix memory
        print("\n--- Matrix Memory Usage ---")
        
        for size in [50, 100, 200]:
            gc.collect()
            memory_before = get_memory_usage()
            
            # Create large matrix
            A = Matrix([[i+j+1 if i != j else i+j+3 for j in range(size)] for i in range(size)])
            det_A = A.det()
            
            memory_after = get_memory_usage()
            memory_used = memory_after - memory_before
            
            print(f"Matrix {size}x{size}: {memory_used:.2f}MB")
    else:
        print("üíæ Memory analysis b·ªã skip - c·∫ßn psutil package")
        print("   Install: pip install psutil")
    
    # =================================================================
    # 8. COMPARISON WITH THEORETICAL BOUNDS
    # =================================================================
    print_section("8. SO S√ÅNH V·ªöI L√ù THUY·∫æT")
    
    print("üìä Theoretical vs Practical Complexity Summary:")
    print()
    
    complexity_table = [
        ("Expression Expansion", "O(d^n)", "Exponential", "üî¥ Very expensive for high degrees"),
        ("Polynomial Factorization", "O(d^6) to Exponential", "Varies", "üü° Depends on polynomial structure"),
        ("Linear System Solving", "O(n¬≥)", "Cubic", "üü¢ Predictable and efficient"),
        ("Symbolic Differentiation", "O(n)", "Linear", "üü¢ Very efficient"),
        ("Symbolic Integration", "Undecidable", "Varies", "üî¥ Can be impossible"),
        ("Matrix Multiplication", "O(n¬≥)", "Cubic", "üü¢ Standard algorithms"),
        ("Determinant", "O(n¬≥)", "Cubic", "üü¢ Much better than naive O(n!)"),
        ("Eigenvalues", "O(n¬≥)+", "Cubic+", "üü° Can be much worse symbolically"),
        ("Primality Testing", "O(log¬≥ n)", "Sub-polynomial", "üü¢ Very efficient"),
        ("Integer Factorization", "Exponential", "Exponential", "üî¥ Fundamental hard problem"),
        ("Polynomial Multiplication", "O(n log n)", "Quasi-linear", "üü¢ FFT-based algorithms"),
        ("Polynomial GCD", "O(n¬≤)", "Quadratic", "üü¢ Euclidean algorithm"),
    ]
    
    for operation, theoretical, practical, assessment in complexity_table:
        print(f"{assessment}")
        print(f"  {operation}: {theoretical} ‚Üí {practical}")
    
    # =================================================================
    # 9. OPTIMIZATION RECOMMENDATIONS
    # =================================================================
    print_section("9. KHUY·∫æN NGH·ªä T·ªêI ∆ØU H√ìA")
    
    recommendations = [
        "üü¢ EFFICIENT OPERATIONS:",
        "  ‚Ä¢ Differentiation: R·∫•t nhanh, s·ª≠ d·ª•ng tho·∫£i m√°i",
        "  ‚Ä¢ Linear algebra: Hi·ªáu qu·∫£ cho ma tr·∫≠n v·ª´a ph·∫£i (<100x100)",
        "  ‚Ä¢ Primality testing: R·∫•t nhanh cho s·ªë th√¥ng th∆∞·ªùng",
        "  ‚Ä¢ Basic arithmetic: Linear complexity",
        "",
        "üü° MODERATE COMPLEXITY:",
        "  ‚Ä¢ Polynomial operations: OK cho degree <50",
        "  ‚Ä¢ Matrix determinant: OK cho size <50x50",
        "  ‚Ä¢ Simple factorization: Depends on structure",
        "",
        "üî¥ EXPENSIVE OPERATIONS:",
        "  ‚Ä¢ High-degree expansion: Tr√°nh degree >20",
        "  ‚Ä¢ Symbolic integration: C√≥ th·ªÉ r·∫•t ch·∫≠m ho·∫∑c th·∫•t b·∫°i",
        "  ‚Ä¢ Large matrix eigenvalues: Symbolic r·∫•t ch·∫≠m",
        "  ‚Ä¢ Integer factorization: Ch·∫≠m cho s·ªë l·ªõn",
        "",
        "üí° OPTIMIZATION TIPS:",
        "  ‚Ä¢ S·ª≠ d·ª•ng numerical evaluation khi c√≥ th·ªÉ",
        "  ‚Ä¢ Simplify expressions tr∆∞·ªõc khi thao t√°c ph·ª©c t·∫°p",
        "  ‚Ä¢ Chia nh·ªè problems l·ªõn th√†nh parts nh·ªè h∆°n",
        "  ‚Ä¢ Cache k·∫øt qu·∫£ expensive computations",
        "  ‚Ä¢ S·ª≠ d·ª•ng assumptions ƒë·ªÉ speed up",
    ]
    
    for rec in recommendations:
        print(rec)
    
    print("\n" + "="*70)
    print("üéØ SUMMARY: SymPy c√≥ complexity t·ª´ linear ƒë·∫øn exponential")
    print("   Hi·ªÉu complexity ƒë·ªÉ choose right approach cho problems!")
    print("="*70)

if __name__ == "__main__":
    # Check if optional packages are available
    if not HAS_PSUTIL:
        print("‚ö†Ô∏è  Warning: psutil kh√¥ng c√≥ - memory analysis s·∫Ω b·ªã skip")
        print("   Install: pip install psutil")
    
    main() 