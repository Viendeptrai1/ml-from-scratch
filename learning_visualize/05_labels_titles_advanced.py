"""
===========================================
GIAI ƒêO·∫†N 2: T√ôY CH·ªàNH BI·ªÇU ƒê·ªí - B√ÄI 1
Labels, Titles v√† Font Styling N√¢ng cao
===========================================

B√†i n√†y s·∫Ω d·∫°y b·∫°n:
1. T√πy ch·ªânh fonts, sizes, colors cho text
2. Positioning v√† rotation c·ªßa labels
3. Math symbols v√† special characters
4. Legend styling n√¢ng cao
5. Annotations v√† text boxes
"""

import matplotlib.pyplot as plt
import numpy as np

print("üé® LABELS, TITLES V√Ä FONT STYLING N√ÇNG CAO")
print("="*50)

# ===========================================
# 1. FONT SIZES V√Ä STYLES C∆† B·∫¢N
# ===========================================
print("\nüìù 1. Font sizes v√† styles c∆° b·∫£n")

# D·ªØ li·ªáu linear regression quen thu·ªôc
x_train = np.array([1.0, 2.0, 3.0, 4.0, 5.0])
y_train = np.array([300, 500, 700, 900, 1100])
w, b = 200, 100
y_predicted = w * x_train + b

plt.figure(figsize=(10, 7))
plt.plot(x_train, y_predicted, c='b', label='Our Prediction', linewidth=2)
plt.scatter(x_train, y_train, marker='x', c='r', label='Actual Values', s=100)

# Font styling n√¢ng cao
plt.title("Housing Prices - Advanced Styling", 
          fontsize=18,           # K√≠ch th∆∞·ªõc font
          fontweight='bold',     # ƒê·ªô ƒë·∫≠m
          color='darkblue',      # M√†u
          pad=20)                # Kho·∫£ng c√°ch t·ª´ plot

plt.xlabel('Size (1000 sqft)', 
           fontsize=14, 
           fontweight='semibold', 
           color='darkgreen')

plt.ylabel('Price (in 1000s of dollars)', 
           fontsize=14, 
           fontweight='semibold', 
           color='darkgreen')

# Legend styling
plt.legend(fontsize=12, 
           loc='upper left',           # V·ªã tr√≠
           frameon=True,               # C√≥ khung
           fancybox=True,              # Khung bo tr√≤n
           shadow=True,                # C√≥ ƒë·ªï b√≥ng
           framealpha=0.9,             # ƒê·ªô trong su·ªët khung
           facecolor='lightgray')      # M√†u n·ªÅn

plt.grid(True, alpha=0.3)
plt.show()

print("‚úÖ Advanced styling cho titles v√† labels!")

# ===========================================
# 2. FONT FAMILIES V√Ä CUSTOM FONTS
# ===========================================
print("\nüî§ 2. Font families v√† custom fonts")

plt.figure(figsize=(10, 6))

# Th·ª≠ c√°c font families kh√°c nhau
fonts = ['serif', 'sans-serif', 'monospace', 'fantasy']
colors = ['red', 'blue', 'green', 'purple']

x = np.linspace(0, 10, 100)
for i, (font, color) in enumerate(zip(fonts, colors)):
    y = np.sin(x + i)
    plt.plot(x, y, label=f'{font} font', color=color, linewidth=2)

plt.title('Different Font Families Demo', 
          fontfamily='serif',      # Font family
          fontsize=16, 
          style='italic')          # Style: normal, italic, oblique

plt.xlabel('X values', fontfamily='sans-serif', fontsize=12)
plt.ylabel('Y values', fontfamily='monospace', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)
plt.show()

print("üí° Font families: serif, sans-serif, monospace, fantasy, cursive")

# ===========================================
# 3. MATH SYMBOLS V√Ä LATEX
# ===========================================
print("\nüßÆ 3. Math symbols v√† LaTeX")

plt.figure(figsize=(10, 6))

# V·∫Ω c√°c h√†m to√°n h·ªçc
x = np.linspace(-2*np.pi, 2*np.pi, 1000)
y1 = np.sin(x)
y2 = np.cos(x)
y3 = np.exp(-x**2/10) * np.sin(x)

plt.plot(x, y1, 'b-', label=r'$y = \sin(x)$', linewidth=2)
plt.plot(x, y2, 'r--', label=r'$y = \cos(x)$', linewidth=2)  
plt.plot(x, y3, 'g:', label=r'$y = e^{-x^2/10} \sin(x)$', linewidth=2)

# LaTeX trong titles v√† labels
plt.title(r'Mathematical Functions: $f(x) = \sin(x), \cos(x), e^{-x^2/10}\sin(x)$', 
          fontsize=14, pad=20)
plt.xlabel(r'$x$ (radians)', fontsize=12)
plt.ylabel(r'$f(x)$', fontsize=12)

# Greek letters v√† symbols
plt.text(-5, 0.8, r'$\alpha = \frac{\pi}{4}$', fontsize=14, 
         bbox=dict(boxstyle="round,pad=0.3", facecolor='yellow', alpha=0.7))
plt.text(3, -0.8, r'$\beta = \sqrt{2}$', fontsize=14,
         bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue', alpha=0.7))

plt.legend(fontsize=11, loc='upper right')
plt.grid(True, alpha=0.3)
plt.axhline(y=0, color='k', linewidth=0.5)
plt.axvline(x=0, color='k', linewidth=0.5)
plt.show()

print("‚úÖ LaTeX math symbols: $, \\alpha, \\beta, \\pi, \\frac{}{}, \\sqrt{}, ^{}, _{}")

# ===========================================
# 4. TEXT POSITIONING V√Ä ROTATION
# ===========================================
print("\nüîÑ 4. Text positioning v√† rotation")

plt.figure(figsize=(10, 8))

# T·∫°o scatter plot v·ªõi annotations
np.random.seed(42)
x_points = np.random.randn(20)
y_points = np.random.randn(20)
colors = np.random.rand(20)

scatter = plt.scatter(x_points, y_points, c=colors, s=100, alpha=0.7, cmap='viridis')

# Annotations v·ªõi arrows
for i in range(5):  # Ch·ªâ annotate 5 ƒëi·ªÉm ƒë·∫ßu
    plt.annotate(f'Point {i+1}', 
                xy=(x_points[i], y_points[i]),     # ƒêi·ªÉm c·∫ßn annotate
                xytext=(10, 10),                   # Offset t·ª´ ƒëi·ªÉm
                textcoords='offset points',        # T·ªça ƒë·ªô relative
                fontsize=10,
                bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.1'))

# Rotated labels
plt.xlabel('X-axis with normal label', fontsize=12)
plt.ylabel('Y-axis with\nrotated label', fontsize=12, rotation=0, labelpad=40)

# Title v·ªõi multi-line
plt.title('Scatter Plot with Annotations\nand Custom Text Positioning', 
          fontsize=14, pad=20)

# Text ·ªü c√°c v·ªã tr√≠ kh√°c nhau
plt.text(-2.5, 2.5, 'Top Left', fontsize=12, ha='left', va='top',
         bbox=dict(boxstyle="round,pad=0.3", facecolor='red', alpha=0.3))
plt.text(2.5, 2.5, 'Top Right', fontsize=12, ha='right', va='top',
         bbox=dict(boxstyle="round,pad=0.3", facecolor='blue', alpha=0.3))
plt.text(0, -2.5, 'Bottom Center', fontsize=12, ha='center', va='bottom',
         bbox=dict(boxstyle="round,pad=0.3", facecolor='green', alpha=0.3))

plt.colorbar(scatter, label='Color Scale')
plt.grid(True, alpha=0.3)
plt.show()

print("‚úÖ Text positioning: ha (left/center/right), va (top/center/bottom)")

# ===========================================
# 5. LEGEND N√ÇNG CAO
# ===========================================
print("\nüè∑Ô∏è 5. Legend styling n√¢ng cao")

plt.figure(figsize=(12, 8))

# Multiple datasets v·ªõi different styles
x = np.linspace(0, 10, 100)
datasets = [
    ('Linear', x, 'red', '-', 'o', 4),
    ('Quadratic', x**1.5, 'blue', '--', 's', 4),
    ('Exponential', np.exp(x/5), 'green', ':', '^', 4),
    ('Logarithmic', np.log(x+1)*10, 'purple', '-.', 'D', 4)
]

for name, y_data, color, ls, marker, ms in datasets:
    # Ch·ªâ sample m·ªôt s·ªë ƒëi·ªÉm cho markers
    plt.plot(x, y_data, color=color, linestyle=ls, linewidth=2, label=name)
    plt.plot(x[::10], y_data[::10], color=color, marker=marker, 
             markersize=ms, linestyle='None', markerfacecolor='white', 
             markeredgecolor=color, markeredgewidth=2)

# Legend v·ªõi multiple columns v√† custom positioning
legend1 = plt.legend(loc='upper left', ncol=2,           # 2 c·ªôt
                    fontsize=11,
                    title='Function Types',              # Ti√™u ƒë·ªÅ legend
                    title_fontsize=12,
                    frameon=True,
                    fancybox=True,
                    shadow=True,
                    framealpha=0.9,
                    facecolor='lightgray',
                    edgecolor='black')

# T√πy ch·ªânh title c·ªßa legend
legend1.get_title().set_fontweight('bold')
legend1.get_title().set_color('darkred')

plt.title('Advanced Legend Styling Example', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('X values', fontsize=12)
plt.ylabel('Y values', fontsize=12)
plt.grid(True, alpha=0.3)

# Th√™m text box v·ªõi th√¥ng tin
textstr = 'Key Points:\n‚Ä¢ Multiple line styles\n‚Ä¢ Custom markers\n‚Ä¢ 2-column legend'
props = dict(boxstyle='round', facecolor='wheat', alpha=0.8)
plt.text(0.7, 0.95, textstr, transform=plt.gca().transAxes, fontsize=10,
         verticalalignment='top', bbox=props)

plt.show()

print("‚úÖ Legend n√¢ng cao: ncol, title, custom positioning!")

# ===========================================
# T·ªîNG K·∫æT B√ÄI 1
# ===========================================
print("\n" + "="*50)
print("üéØ T·ªîNG K·∫æT B√ÄI 1 - LABELS & TITLES N√ÇNG CAO")
print("="*50)
print("""
‚úÖ ƒê√É H·ªåC:
1. Font styling: fontsize, fontweight, color, fontfamily
2. Math symbols v·ªõi LaTeX: $\\alpha$, $\\frac{}{}$, $\\sqrt{}$
3. Text positioning: ha, va, rotation, annotations
4. Legend n√¢ng cao: ncol, title, custom styling
5. Text boxes v√† arrows

üî• C√ö PH√ÅP QUAN TR·ªåNG:
- plt.title('Title', fontsize=16, fontweight='bold', color='blue')
- plt.xlabel(r'$x$ (units)', fontsize=12)  # LaTeX
- plt.legend(ncol=2, title='Legend Title', loc='upper left')
- plt.text(x, y, 'Text', ha='center', va='top')
- plt.annotate('Label', xy=(x,y), xytext=(10,10))

üí° TIPS:
- D√πng r'$...$' cho LaTeX math
- pad=20 ƒë·ªÉ tƒÉng kho·∫£ng c√°ch title
- ha='center', va='top' ƒë·ªÉ cƒÉn ch·ªânh text
- bbox=dict() ƒë·ªÉ t·∫°o text box
""")

print("üöÄ Ti·∫øp theo: H·ªçc colors v√† styles n√¢ng cao!") 